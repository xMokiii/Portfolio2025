/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useGLTF, useScroll } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import gsap from "gsap";
import React, { useEffect, useRef } from "react";
import * as THREE from 'three';
import WaterEffect from './WaterEffect';

const InitPoseX=0;
const InitPoseY=0;
const InitPoseZ=0;
export const FLOOR_HEIGHT = 0.3;
export const NB_FLOORS = 3;

export function Office(props) {
  const cubeTextureLoader = new THREE.CubeTextureLoader();
  // const environmentMap = cubeTextureLoader.load([
  //   '/px.png', '/nx.png', '/py.png', '/ny.png', '/pz.png', '/nz.png',
  // ]);
  const { nodes, materials } = useGLTF("./models/IcebergFinal.glb");
  const ref = useRef();
  const tl = useRef();

  const scroll = useScroll();

  useFrame(() => {
    tl.current.seek(scroll.offset * tl.current.duration());
  });

  useEffect(() => {
    tl.current = gsap.timeline();


    // Office Rotation
    tl.current.to(
      ref.current.rotation,
      { duration: 1, x: 0, y: -1, z: 0.3, },
      0
    );
    tl.current.to(
      ref.current.rotation,
      { duration: 1, x: 0, y: -Math.PI / 8, z: 0 },
      1
    );

    // Office movement
    tl.current.to(
      ref.current.position,
      {
        duration: 1,
        x: -2,
        y: 0,
        z: 1.5,
      },
      0
    );
    tl.current.to(
      ref.current.position,
      {
        duration: 1,
        x: 1,
        z: 2,
      },
      1
    );

  }, []);

  return (
    <group {...props} dispose={null} ref={ref}>
      <WaterEffect resolution={512}  />
      <mesh geometry={nodes.Mesh_0.geometry} material={materials.Material_0} scale={3} position={[0,-1.93,-1]}  rotation={[0, -Math.PI / 2, 0]}/>
        constructor(parameters) {
          
        }
    </group>
  );
}

useGLTF.preload("./models/IcebergFinal.glb");
